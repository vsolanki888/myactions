name: 'Create sync PR'

on:
    workflow_call:
        inputs:
            sync_branch:
                description: 'Branch to sync with'
                required: true
                type: string
            pr_title:
                description: 'Title for the PR'
                required: true
                type: string
                default: 'Sync with main branch'
            pr_body:
                description: 'Body for the PR'
                required: false
                type: string
                default: 'This PR syncs the current branch with the main branch.'
            runner:
                description: 'Runner to use for the workflow'
                required: false
                type: string
                default: '["ubuntu-latest"]'
        secrets:
            GH_PAT:
                required: true
        outputs:
            pr_number:
                description: 'Number of the created PR'
                value: ${{ jobs.sync.outputs.pr_number }}
            pr_url:
                description: 'URL of the created PR'
                value: ${{ jobs.sync.outputs.pr_url }}
            has_conflicts:
                description: 'Indicates if there are merge conflicts'
                value: ${{ jobs.sync.outputs.has_conflicts }}
jobs:
    sync:
        runs-on: ${{ fromJson(inputs.runner) }}
        outputs:
            pr_number: ${{ steps.create_pr.outputs.pr_number }}
            pr_url: ${{ steps.create_pr.outputs.pr_url }}
            has_conflicts: ${{ steps.merge_main.outputs.has_conflicts }}
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
              with:
                fetch-depth: 0
                token: ${{ secrets.GH_PAT }}

            - name: Validate required branches exist (via GitHub API)
              id: validate_branches
              uses: actions/github-script@v6
              with:
                script: |
                  try {
                    await github.rest.repos.getBranch({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      branch: 'main'
                    });
                    console.log("Branch 'main' exists.");
                  } catch (error) {
                    core.setFailed("Error: The 'main' branch does not exist. Please check the branch name or create it.");
                  }
                  try {
                    await github.rest.repos.getBranch({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      branch: 'dev'
                    });
                    console.log("Branch 'dev' exists.");
                  } catch (error) {
                    core.setFailed("Error: The 'dev' branch does not exist. Please check the branch name or create it.");
                  }
              env:
                GITHUB_TOKEN: ${{ secrets.GH_PAT }}

            - name: Create or checkout sync branch from dev
              shell: bash
              run: |
                git fetch origin dev
                if git show-ref --verify --quiet refs/heads/${{ inputs.sync_branch }}; then
                    echo "Sync branch '${{ inputs.sync_branch }}' already exists locally. Checking it out and resetting."
                    git checkout ${{ inputs.sync_branch }}
                else
                    echo "Sync branch '${{ inputs.sync_branch }}' does not exist. Creating it from origin/dev."
                    git checkout -b ${{ inputs.sync_branch }} origin/dev
                fi
                git reset --hard origin/dev

            - name: Merge main into sync branch
              id: merge_main
              shell: bash
              run: |
                git fetch origin main
                if git merge origin/main --no-edit --no-ff; then
                    echo "has_conflicts=false" >> $GITHUB_OUTPUT
                else
                    echo "has_conflicts=true" >> $GITHUB_OUTPUT
                    echo "Merge conflicts detected."
                    git status
                    exit 1
                fi
            
            - name: Check for new commits
              id: check_changes
              shell: bash
              run: |
                if [ "$(git rev-parse HEAD)" = "$(git rev-parse origin/dev)" ]; then
                    echo "has_changes=false" >> $GITHUB_OUTPUT
                    echo "No new commits to sync."
                else
                    echo "has_changes=true" >> $GITHUB_OUTPUT
                fi

            - name: Push sync branch
              if: steps.check_changes.outputs.has_changes == 'true'
              shell: bash
              run: |
                git push origin ${{ inputs.sync_branch }} --force
            
            - name: Create pull request
              id: create_pr
              if: steps.check_changes.outputs.has_changes == 'true'
              shell: bash
              env:
                GITHUB_TOKEN: ${{ secrets.GH_PAT }}
              run: |
                PR_URL=$(gh pr create \
                    --base dev \
                    --title "${{ inputs.pr_title }}" \
                    --body "${{ inputs.pr_body }}" \
                    --head ${{ inputs.sync_branch }})
                PR_NUMBER=$(echo $PR_URL | grep -oE '[0-9]+$')
                echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
                echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT